# 這題是給一串可以構成數字的英文字母字串(隨機排序)，然後把他們重新變成數字並依照遞增序列把他們都列出來
# 先觀察英文字母可以發現 0 2 4 6 8 的構成分別有各自獨特唯一的字母 z w u x g
  # 所以第一步可以先計算這些英文字的數量來看有多少相對應的數字
# 然後剩下的數字就會跟其他數字有關，這時候要挑選不重複的字並且盡可能跟 02468 有關
  # 不重複的部分是避免計算上的困擾，像是 e 在 3 7 裡面都重複兩次，所以在算數量的時候我要怎麼去扣除跟計算就是個麻煩
  # 盡可能跟 02468 有關是可以確保數量不會重複計算，同時也盡量找重複一次且重疊的量最少的
# 做成列表就變成 digits，然後按照順序操作，先把 02468 的數量找出來再依序往後找相關的數字，用關鍵字母去找並且扣掉前面算過的那些

digits = [
    [0,'z',[]],
    [2,'w',[]],
    [4,'u',[]],
    [6,'x',[]],
    [8,'g',[]],
    [5,'f',[4]],
    [7,'s',[6]],
    [3,'h',[8]],
    [9,'i',[6,8,5]],
    [1,'o',[0,2,4]]
]

class Solution:
    def originalDigits(self, s: str) -> str:
        ans, n = [0] * 10, len(s)
        for i in range(10):
            digit, char, rmv = digits[i]
            count = s.count(char)
            for r in rmv:
                count -= ans[r]
            ans[digit] += count
        
        return ''.join([str(i) * ans[i] for i in range(10)])
