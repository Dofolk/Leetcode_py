# 這題會給一串數字，然後依據數字把數字變成英文字母的組合，然後看看有多少組合
# 做法是用迭代法的概念去做的
# 想法就是用迴圈來做，每次在字串後面多補一個數字進來就會有幾個狀況，要不要使用加進來的這個數字以及這個數字是多少
  # 如果是 0 的話就是加上前一次的計算結果，因為 0 沒辦法變成英文字母，所以相當於沒用到他
  # 然後就是包含這個數字在網前一個數字，湊成二位數，果可以湊成二位數並且在 10~26 的話就代表我可以讓最後面的數字變成二位數，然後就可以把上上次的結果加進來

class Solution:
    def numDecodings(self, s: str) -> int:
        if not s: return 0
        n = len(s)
        dp = [0]*(n+1)
        dp[0] = 1
        
        for i in range(1,n+1):
            if s[i-1] != '0':
                dp[i] += dp[i-1]
            if len(s[i-2:i])==2 and '10' <= s[i-2:i] <= '26':
                dp[i] += dp[i-2]
        return dp[n]
