# 這題是給一個有 D 跟 I 的字串，分別代表前一個數字對於下一個數字來說是遞增(I)或是遞減(D)，在這樣的操作下最後可以得到最小的數字字串是什麼
# for ex: "DDD" 最小可以拿到 "4321"，這邊可以看出來給的 DI 字串長度會小最終結果一格，因為第一個 D 就是指 4 跟 3 要是遞減的關係
# 這樣的話從頭處理起來就比較麻煩，所以我這邊選從後面往前做，這樣在想法架構比較不用去處理這塊問題，只是伴隨而來就是要處理多一點 index
# 首先要知道總共要輸出多少位數，就是 DI 字串長度 + 1，然後用 res 跟 ls 來分別記錄結果還有暫存遇到的數字
# 因為從後往前，所以最一開始用的數字就是 DI 字串長度 + 1，然後逐個往前遞減，當遇到 "I" 時就把暫存的數字給塞進 res 裡面
# 在塞的時候就是以 push left 的方向放進去，這樣才會是正確的順序(也就是 I 是一個檢查點，檢查後面的字串數字有沒有做好)
# 接著還有一個條件就是當我往前找到沒有 DI 字串時(也就是 -1)，我就也要把數字加進結果裡面，因為這代表 DI 字串的頭部分都是 D，導致一直找不到 I 來清算暫存

class Solution:
    def smallestNumber(self, pattern: str) -> str:
        L = len(pattern)
        res = ""
        ls = list()
        
        for idx in range(L - 1, -2, -1):
            ls.append(str(idx + 2))

            if idx == -1 or pattern[idx] == "I":
                res = ''.join(ls) + res
                ls = list()
        return res
